base = Node;

module-header = @{
namespace leaf {

}@

module-footer = @{
} // namespace leaf

}@

class-footer = @{
    llvm::Value*    encode( EncodeContext&, bool );
    void			entype( EntypeContext&, bool, type_t );
}@

atom = bool, char, int, symbol_t, type_t, symmap_t;

type Module = TopElems(topelems);

type TopElems = TopElem*(v);
type TopElem = Require | TopLevelFunDecl | TopLevelFunDef;

type Require = Identifier(name), Module(module);
type TopLevelFunDecl = FunDecl(fundecl);
type TopLevelFunDef = FunDef(fundef);

type FunSig = Identifier(name), FormalArgs(fargs), Types(result_type);
type FormalArgs = FormalArg*(v);
type FormalArg = Identifier(name), TypeRef(t);

type Block = Statements(statements);

type Statements = Statement*(v);
type Statement = FunDecl | FunDef | VarDecl | IfThenElse | Expr;

type FunDecl = FunSig(sig);
type FunDef = FunSig(sig), Block(body), symmap_t(freevars);

type VarDecl = Identifier(name), TypeRef(t), Expr(value);

type IfThenElse = Expr(cond), Block(iftrue), Block(iffalse);

type Expr = LogicalOr;

type LogicalOr = LogicalAnd*(v);

type LogicalAnd = Equality*(v);

type Equality = Relational | EqualityEq | EqualityNe;

type Relational = Additive
	 			| RelationalLt | RelationalGt
				| RelationalLe | RelationalGe;

type EqualityEq = Equality(lhs), Relational(rhs);
type EqualityNe = Equality(lhs), Relational(rhs);

type RelationalLt = Relational(lhs), Additive(rhs);
type RelationalGt = Relational(lhs), Additive(rhs);
type RelationalLe = Relational(lhs), Additive(rhs);
type RelationalGe = Relational(lhs), Additive(rhs);

type Additive = Multiplicative | AddExpr | SubExpr;

type AddExpr = Additive(lhs), Multiplicative(rhs);
type SubExpr = Additive(lhs), Multiplicative(rhs);

type Multiplicative = PrimExpr | MulExpr | DivExpr;
type MulExpr = Multiplicative(lhs), PrimExpr(rhs);
type DivExpr = Multiplicative(lhs), PrimExpr(rhs);

type PrimExpr = LiteralBoolean | LiteralInteger | LiteralChar
              | VarRef | Parenthized | FunCall | Cast;
type LiteralBoolean = bool(value);
type LiteralInteger = int(value);
type LiteralChar = char(value);
type VarRef = Identifier(name);
type Parenthized = Expr(expr);
type FunCall = Identifier(func), ActualArgs(aargs);
type Cast = Expr(expr), TypeRef(t);

type ActualArgs = ActualArg*(v);
type ActualArg = Expr(expr);

type Types = TypeRef*(v);
type TypeRef = type_t(t);

type Identifier = symbol_t(s);
