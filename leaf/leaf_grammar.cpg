%token Req;
%token LiteralBoolean<leaf::LiteralBoolean*>;
%token LiteralInteger<leaf::LiteralInteger*>;
%token LiteralChar<leaf::LiteralChar*>;
%token Identifier<leaf::Identifier*>;
%token Var Fun Struct If Else;
%token Add Sub Mul Div Assign LPar RPar LBra RBra Comma Semicolon Colon;
%token Lt Gt Le Ge Eq Ne Not And Or At;
%token BitAnd BitOr;
%token TypeVoid<leaf::TypeRef*>;
%token TypeLong<leaf::TypeRef*>;
%token TypeInt<leaf::TypeRef*>;
%token TypeShort<leaf::TypeRef*>;
%token TypeChar<leaf::TypeRef*>;
%namespace leaf;

////////////////////////////////////////////////////////////////
// Module
Module<leaf::Module*>
	: [makeModule] TopElems(0)
	;

////////////////////////////////////////////////////////////////
// TopElems TopElem
TopElems<leaf::TopElems*>
	: [makeTopElems0] TopElem(0)
	| [makeTopElems1] TopElems(0) TopElem(1)
	;

TopElem<leaf::TopElem*>
	: [identity] Require(0)
	| [identity] TopLevelFunDecl(0)
	| [identity] TopLevelFunDef(0)
	| [identity] TopLevelStructDef(0)
	;	

////////////////////////////////////////////////////////////////
// Require
Require<leaf::Require*>
	: [makeRequire] Req Identifier(0) Semicolon
	;

////////////////////////////////////////////////////////////////
// TopLevelFunDecl
TopLevelFunDecl<leaf::TopLevelFunDecl*>
	: [makeTopLevelFunDecl] FunDecl(0)
	;

////////////////////////////////////////////////////////////////
// TopLevelFunDef
TopLevelFunDef<leaf::TopLevelFunDef*>
	: [makeTopLevelFunDef] FunDef(0)
	;

////////////////////////////////////////////////////////////////
// TopLevelStructDef
TopLevelStructDef<leaf::TopLevelStructDef*>
	: [makeTopLevelStructDef] StructDef(0)
	;

////////////////////////////////////////////////////////////////
// Block
Block<leaf::Block*>
	: [makeBlock] LBra Statements(0) RBra
	;

////////////////////////////////////////////////////////////////
// Statements Statement
Statements<leaf::Statements*>
	: [makeStatements0]
	| [makeStatements1] Statements(0) Statement(1)
	;

Statement<leaf::Statement*>
	: [identity] FunDecl(0)
	| [identity] FunDef(0)
	| [identity] StructDef(0)
	| [identity] VarDecl(0) Semicolon
	| [identity] IfThenElse(0)
	| [identity] MultiExpr(0) Semicolon
	| [expectSemicolon] VarDecl RBra
	| [expectSemicolon] MultiExpr RBra
	;

////////////////////////////////////////////////////////////////
// FunDecl
FunDecl<leaf::FunDecl*>
	: [makeFunDecl] FunSig(0) Semicolon
	;

////////////////////////////////////////////////////////////////
// FunDef
FunDef<leaf::FunDef*>
	: [makeFunDef] FunSig(0) Block(1)
	;

////////////////////////////////////////////////////////////////
// FunSig
FunSig<leaf::FunSig*>
	: [makeFunSig1] Fun Identifier(0) FormalArgList(1) Colon Types(2)
	;

////////////////////////////////////////////////////////////////
// FormalArgList FormalArgs FormalArg
FormalArgList<leaf::FormalArgs*>
	: [makeFormalArgs0] LPar RPar
	| [badFormalArgs0] LPar Semicolon
	| [badFormalArgs1] LPar FormalArgs Semicolon
	| [badFormalArgs2] LPar RBra
	| [badFormalArgs3] LPar FormalArgs RBra
	| [identity] LPar FormalArgs(0) RPar
	;

FormalArgs<leaf::FormalArgs*>
	: [makeFormalArgs1] FormalArg(0)
	| [makeFormalArgs2] FormalArgs(0) Comma FormalArg(1)
	;

FormalArg<leaf::FormalArg*>
	: [makeFormalArg0] Identifier(0)
	| [makeFormalArg1] Identifier(0) Colon TypeExpr(1)
	| [badFormalArg0] TypeExpr Identifier
	;

////////////////////////////////////////////////////////////////
// StructDef
StructDef<leaf::StructDef*>
	: [makeStructDef] Struct Identifier(0) LBra Members(1) RBra Semicolon
	;

////////////////////////////////////////////////////////////////
// Members
Members<leaf::Members*>
	: [makeMembers0] Member(0)
	| [makeMembers1] Members(0) Member(1)
	;

////////////////////////////////////////////////////////////////
// Member
Member<leaf::Member*>
	: [makeMember] FormalArg(0) Semicolon
	;

////////////////////////////////////////////////////////////////
// VarDecl
VarDecl<leaf::VarDecl*>
	: [makeVarDecl] Var VarDeclElems(0) Assign MultiExpr(1)
	;

////////////////////////////////////////////////////////////////
// VarDeclElems
VarDeclElems<leaf::VarDeclElems*>
	: [makeVarDeclElems0] VarDeclElem(0)
	| [makeVarDeclElems1] VarDeclElems(0) Comma VarDeclElem(1)
	;

////////////////////////////////////////////////////////////////
// VarDeclElem
VarDeclElem<leaf::VarDeclElem*>
	: [makeVarDeclIdentifier0] Identifier(0)
	| [makeVarDeclIdentifier1] Identifier(0) Colon TypeExpr(1)
	| [identity] LPar VarDeclElems(0) RPar
	;

////////////////////////////////////////////////////////////////
// IfThenElse
IfThenElse<leaf::IfThenElse*>
	: [makeIfThenElse0] If LPar Expr(0) RPar Block(1) Else Block(2)
	| [makeIfThenElse1] If LPar Expr(0) RPar Block(1) Else IfThenElse(2)
	;

////////////////////////////////////////////////////////////////
// TypeExpr
TypeExpr<leaf::TypeExpr*>
	: [identity] NamedType(0)
	| [identity] SimpleType(0)
	| [identity] FunctionType(0)
	| [identity] LPar Types(0) RPar
	;

////////////////////////////////////////////////////////////////
// NamedType
NamedType<leaf::NamedType*>
	: [makeNamedType] Identifier(0)
	;

////////////////////////////////////////////////////////////////
// SimpleType
SimpleType<leaf::TypeRef*>
	: [makeTypeVoid] TypeVoid
	| [makeTypeLong] TypeLong
	| [makeTypeInt] TypeInt
	| [makeTypeShort] TypeShort
	| [makeTypeChar] TypeChar
	;

////////////////////////////////////////////////////////////////
// FunctionType
FunctionType<leaf::TypeRef*>
	: [makeFunctionType] Fun TypeList(0) Colon Types(1)
	;

////////////////////////////////////////////////////////////////
// TypeList
TypeList<leaf::Types*>
	: [makeTypes0] LPar RPar
	| [identity] LPar Types(0) RPar
	;

////////////////////////////////////////////////////////////////
// Types
Types<leaf::Types*>
	: [makeTypes1] TypeExpr(0)
	| [makeTypes2] Types(0) Comma TypeExpr(1)
	;

////////////////////////////////////////////////////////////////
// MultiExpr
MultiExpr<leaf::MultiExpr*>
	: [makeMultiExpr0] Expr(0)
	| [makeMultiExpr1] MultiExpr(0) Comma Expr(1)
	;

////////////////////////////////////////////////////////////////
// Expr
Expr<leaf::Expr*>
	: [identity] LogicalOr(0)
	;

////////////////////////////////////////////////////////////////
// LogicalOr
LogicalOr<leaf::LogicalOr*>
	: [identity] LogicalAnd(0)
	| [identity] LogicalOrElems(0)
	;

////////////////////////////////////////////////////////////////
// LogicalOrElems
LogicalOrElems<leaf::LogicalOrElems*>
	: [makeLogicalOrElems0] LogicalAnd(0) Or LogicalAnd(1)
	| [makeLogicalOrElems1] LogicalOrElems(0) Or LogicalAnd(1)
	;

////////////////////////////////////////////////////////////////
// LogicalAnd
LogicalAnd<leaf::LogicalAnd*>
	: [identity] Equality(0)
	| [identity] LogicalAndElems(0)
	;

////////////////////////////////////////////////////////////////
// LogicalAndElems
LogicalAndElems<leaf::LogicalAndElems*>
	: [makeLogicalAndElems0] Equality(0) And Equality(1)
	| [makeLogicalAndElems1] LogicalAndElems(0) And Equality(1)
	;

////////////////////////////////////////////////////////////////
// Equality
Equality<leaf::Equality*>
	: [identity] Relational(0)
	| [makeEq] Equality(0) Eq Relational(1)
	| [makeNe] Equality(0) Ne Relational(1)
	;

////////////////////////////////////////////////////////////////
// Relational
Relational<leaf::Relational*>
	: [identity] Additive(0)
	| [makeLt] Relational(0) Lt Additive(1)
	| [makeGt] Relational(0) Gt Additive(1)
	| [makeLe] Relational(0) Le Additive(1)
	| [makeGe] Relational(0) Ge Additive(1)
	;

////////////////////////////////////////////////////////////////
// Additive
Additive<leaf::Additive*>
	: [identity] Multiplicative(0)
	| [makeAdd] Additive(0) Add Multiplicative(1)
	| [makeSub] Additive(0) Sub Multiplicative(1)
	;

////////////////////////////////////////////////////////////////
// Multiplicative
Multiplicative<leaf::Multiplicative*>
	: [identity] CastExpr(0)
	| [makeMul] Multiplicative(0) Mul CastExpr(1)
	| [makeDiv] Multiplicative(0) Div CastExpr(1)
	;

////////////////////////////////////////////////////////////////
// CastExpr
CastExpr<leaf::CastExpr*>
	: [identity] PrimExpr(0)
	| [makeCast] PrimExpr(0) At TypeExpr(1)
	;

////////////////////////////////////////////////////////////////
// PrimExpr
PrimExpr<leaf::PrimExpr*>
	: [mismatchParen0] LPar Expr Semicolon
	| [mismatchParen1] LPar Expr RBra
	| [mismatchParen2] LPar RPar
	| [mismatchParen3] LPar Semicolon
	| [mismatchParen4] LPar RBra
	| [identity] LiteralBoolean(0)
	| [identity] LiteralInteger(0)
	| [identity] LiteralChar(0)
	| [makeVarRef] Identifier(0)
	| [identity] FunCall(0)
	| [identity] LiteralStruct(0)
	| [makeParenthized] LPar MultiExpr(0) RPar
	| [identity] Lambda(0)
	;

////////////////////////////////////////////////////////////////
//
FunCall<leaf::FunCall*>
	: [badActualArgs0] Identifier LPar Semicolon
	| [badActualArgs1] Identifier LPar RBra
	| [badActualArgs2] Identifier LPar ActualArgs Semicolon
	| [badActualArgs3] Identifier LPar ActualArgs RBra
	| [makeFunCall0] Identifier(0) LPar RPar
	| [makeFunCall1] Identifier(0) LPar ActualArgs(1) RPar
	;

////////////////////////////////////////////////////////////////
// LiteralStruct
LiteralStruct<leaf::LiteralStruct*>
	: [makeLiteralStruct] Identifier(0) LBra LiteralMembers(1) RBra
	;

////////////////////////////////////////////////////////////////
// LiteralMembers
LiteralMembers<leaf::LiteralMembers*>
	: [makeLiteralMembers0]
	| [makeLiteralMembers1] LiteralMembers(0) LiteralMember(1)
	;

////////////////////////////////////////////////////////////////
// LiteralMember
LiteralMember<leaf::LiteralMember*>
	: [makeLiteralMember] Identifier(0) Assign MultiExpr(1) Semicolon
	;

////////////////////////////////////////////////////////////////
//
Lambda<leaf::Lambda*>
	: [makeLambda] Fun FormalArgList(0) Colon Types(1) Block(2)
	;

////////////////////////////////////////////////////////////////
// ActualArgs
ActualArgs<leaf::ActualArgs*>
	: [makeActualArgs0] ActualArg(0)
	| [makeActualArgs1] ActualArgs(0) Comma ActualArg(1)
	;

////////////////////////////////////////////////////////////////
// ActualArg
ActualArg<leaf::ActualArg*>
	: [makeActualArg] Expr(0)
	;
